
#Chapter 01. 웹 프로그래밍 기초

	01.웹 어플리케이션과 웹 프로그래밍
		
		-------------------------------------------------------------------------------------------------------------------------
		***웹 브라우저 <-> 웹 서버 <-> 어플리케이션 서버 <-> DB
		-------------------------------------------------------------------------------------------------------------------------
		*웹브라우저 -제품 : IE,Chrome...
					    -역할 : 웹 서버에 서비스 실행을 요청, 처리 결과를 보여준다. 
		
		*웹 서버 -제품 : 아파치..
					-역할 : 요청받은 뒤 알맞은 결과를 웹브라우저에게 전송. 프로그램 처리가 필요하면 어플리케이션 서버를 사용하거나 프로그램을 실행.
								주로 정적인 HTML, 이미지, CSS, 자바스크립트 파일을 웹 브라우저에 제공
		
		*어플리케이션 서버 -제품 : 톰캣, JBoss...
								-역할 : 로그인처리와 같은 기능을 실행하고 결과를 응답으로 웹서버에 전달
								
		*DB -제품 : Oracle, MySQL, MSSQL...
			  -역할 : 데이터를 저장
			  
		-------------------------------------------------------------------------------------------------------------------------
		
		***어플리케이션 서버도 웹 서버처럼 정적인 처리를 할 수 있지만, 각자의 역할에 따른 성능차이 때문에 각각의 역할에 초점을 맞추어 수행한다.
		
		1.1 CGI방식과 어플리케이션 서버 방식
			웹 어플리케이션의 실행과정 : 요청 - 처리 - 응답
			
			*동작 방식
				CGI방식
				어플리케이션 서버 방식
				
			*CGI방식 (Common Gateway Interface)
				- 웹서버가 프로그램을 직접 실행
			
			* 어플리케이션 서버 방식
				 - 간접적으로 웹 어플리케이션 서버를 통해 프로그램을 실행
				 - 요즘 대부분의 사용방식(JSP, ASP.net...)
				 
				***5개의 웹브라우저가 동일한 프로그램 요청 시, CGI방식은 요청 개수만큼 프로그램이 메모리에 로딩되어야 한다. => 성능 저하 발생 가능성이 높다.
				이에 반해 어플리케이션 서버 방식은 다수의 같은 프로그램 요청이 발생하더라도 관련 프로그램을 메모리에 한번만 로딩한다. => 대량의 트래픽처리에 적합함
				
		
		1.2 스크립트 방식과 실행코드 방식
			*웹 어플리케이션 프로그래밍의 구현방식 : 실행 코드 방식/ 스크립트 방식
			
			*실행코드방식 : 컴파일 된 실행 프로그램 / 코드 변경 시 컴파일 필요 / C기반 CGI프로그램
			*스크립트 방식: 컴파일 되지 않은 스크립트 코드 / 스크립트 코드만 고치면 됨 / JSP,ASP.net, PHP...
			
			대부분은 성능상의 이점으로 스크립트 언어를 기반으로 구현되고 있다.
		
			
	02. URL과 웹 어플리케이션 주소
	
		1. URL(Uniform Resource Locator)
			[프로토콜]://[호스트][:포트][경로][파일명][.확장자][쿼리문자열]
			
			1.1 프로토콜
				웹브라우저나 웹서버는 http나 https를 이용하여 통신
				
			1.2 호스트
				서버 주소나 IP 주소를 입력한다. 포트는 따로 입력하지 않을 시 기본 80포트로 접속된다.
				
			1.3경로,파일명,확장자
				서버에서 가져올 자원의 위치
				
			1.4 쿼리문자열
				주소 뒤에 추가로 붙는 정보. 파라미터라고 불리는 데이터를 웹 어플리케이션에 전달할 때 사용
				'?'를 이용하여 경로와 구분되며 각각의 파라미터는 '&'를 이용하여 구분, 이름과 값은 '='를 이용하여 구분
				
	
	03. 자바와 웹 프로그래밍
		
		3.1 서블릿과 JSP
			*서블릿 : 
				예전 SUN에서 웹개발을 위해 만든 표준. 서블릿 규약에 따라 만든 클래스가 서블릿이다.
				서블릿을 만들기 위해서는 자바코드 작성 -> 컴파일이 필요 => 실행 코드 방식
				
				실행코드방식의 단점을 보완하기 위해 스크립트 방식의 표준인 JSP를 만듬.
				JSP표준은 서블릿을 기반으로 만들어졌기 때문에 내부적으로 JSP파일이 번역되면 최종 결과물로 서블릿이 만들어진다.
				
		3.2 JSP란 무엇인가?
			*JSP(JavaServer Page)
				- 자바언어를 기반으로 하는 스크립트 언어
				- 다양한 스크립트 요소와 액션태그 등을 제공하여 보다 쉽게 웹 어플리케이션을 프로그래밍 할 수 있도록 도와준다.
				
		3.3 웹 컨테이너
			*웹 컨테이너 : 
				웹 어플리케이션을 실행할 수 있는 컨테이너
				자바에서의 웹 어플리케이션은 JSP와 서블릿으로 구현된다.
				톰캣 또한 웹 컨테이너로서 JSP와 서블릿을 지원한다.
				처음엔 서블릿 컨테이너... + 나중엔 JSP 컨테이너 ... = 둘이 합쳐서 웹 컨테이너라고 부름
				
		3.4 JSP를 사용하는 이유
			- 자바언어 기반이므로 플랫폼에 독립적
			- SPRING등의 프레임워크 연동 및 지원이 잘된다.
			
			
#Chapter 02. 웹 프로그래밍 시작하기

	01. 웹 프로그래밍 절차
		*웹 어플리케이션 개발 절차
			1. 개발 환경 구축
			2. 웹 어플리케이션 코드 개발 및 테스트
			3. 완성된 웹 어플리케이션을 서비스 환경에 배포
			
		2.2 웹 컨테이너의 디렉터리
			bin - 톰캣 실행/종료 스크립트(.bat, .sh)파일이 위치해 있다.
			conf - server.xml파일을 포함한 톰캣 설정 파일이 위치
			lib - 톰캣 실행 라이브러리(.jar)파일이 위치
			webapps - 웹 어플리케이션
			work - 톰캣이 실행되는 동안 사용되는 작업파일이 위치
			temp - 임시파일
			logs - 톰캣 로그파일
			
		3.2 간단한 JSP 작성하기
			*jsp가 생성한 HTML코드의 주목할 점
				디렉티브, 스크립틀릿 코드가 위치한 부분은 공백문자로 표시되었다.
				표현식은 값으로 변환되어 출력
				디렉티브, 스크립틀릿, 표현식을 제외한 나머지 문자는 그대로 출력
				
			** JSP파일은 새로고침 실행 시 생성되는 결과화면이 변경된다. => JSP의 동적인 측면
				HTML, 이미지 등은 웹 브라우저에서 새로고침을 하더라도 매번 동일한 데이터와 이미지가 출력 => 정적인 측면
				
			
#Chapter 03. JSP로 시작하는 웹 프로그래밍
	.jsp파일에서 html이 아닌 <% %>부분...스크립트릿
	값을 출력결과에 포함시키고자하는 <%=...%> ...표현식
	
	01. 기본 코드 구조
		일반적인 JSP코드는 크게 두 부분으로 나뉜다.
			1. 설정 부분 : JSP에 대한 설정 정보
			2. 생성 부분 : 
			