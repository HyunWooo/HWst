Chapter1. 클린 코드
	1.3 나쁜 코드로 치르는 대가
		중복을 피하라
		한 기능만 수행하라
		제대로 표현하라
		간단하게 추상화하라
	
	1.6 보이스카우트 규칙
		캠프장은 처음 왔을때보다 더 깨끗하게 해놓고 떠나라!
		
		
Chapter2. 의미있는 이름
	2.2 의도를 분명히 밝혀라
		변수/함수/클래스에 따로 주석이 필요하다면 의도를 분명히 드러내지 못한거다.
		=> 명시적이어야 한다.
	
	2.3 그릇된 정보를 피하라
		실제로 List가 아니라면 ~~List로 명명하지 않는다. => ~~Group같은걸로..
		
	2.4 의미있게 구분하라
		연속적인 숫자를 덧붙인 이름은 의도적인 의름과 정반대다. 아무런 정보를 제공하지 못하는 이름...
		읽는 사람이 차이를 알 수 있도록 이름을 지어라.
		
	2.5 발음하기 쉬운 이름을 사용하라
	2.6 검색하기 쉬운 이름을 사용하라
		변수나 상수를 코드 여러 곳에서 사용한다면 검색하기 쉬운 이름이 바람직하다.
	
	2.7 인코딩을 피하라
	2.9 클래스 이름
		클래스 이름과 객체 이름은 명사나 명사구가 적합. 동사는 사용하지 않는다.
		
	**2.10 메소드 이름
		동사나 동사구가 적합하다.
		조건자는 앞에 is를 붙인다.
		
		**생성자를 중복해 정의할 때는 정적 팩토리 메소드를 사용한다. 메소드는 인수를 설명하는 이름을 사용한다.
			이런식으로 factory method 를 만들 때는 항상 naming 을 고려해야 한다. 잘못된 naming 으로 확장한 static factory method 는 오히려 혼란을 줄 수도 있다.
			
			
	2.12 개념 하나에 단어 하나를 사용하라
		일관성 있는 어휘가 필요하다.
		메소드 이름은 일관적이고 독자적이어야한다. 그래야 주석을 뒤져보지 않고도 올바른 메소드를 선택할 수 있다.
	
		
Chapter3. 함수
	3.2 작게 만들어라
		함수는 한가지를 해야한다. 읽고 이해하기 쉬어야 한다.
		=> 함수가 '한가지'만 하는지 판단하는 방법 => 의미 있는 이름으로 다른함수를 추출할 수 있다면 그 함수는 여러 작업을 하는 함수이다.
		
	3.5 서술적인 이름을 사용하라
		코드를 읽으며 짐작했던 기능을 그대로 수행한다면 클린코드..
		짧고 어려운 이름보다 길고 서술적인 이름이 더 낫다.
	
	***3.6 함수 인수
		플래그 인수
			 - 플래그 인수는 추하다... 함수가 한꺼번에 여러가지를 처리한다고 대놓고 공표하는것...
			 
	3.8 명령과 조회를 분리하라
	3.9 오류코드보다 예외를 사용하라
		*Try/Catch 대신 예외를 던져라...
		  정상적인 동작과 오류처리 동작을 분리하면 코드를 이해하고 수정하기 쉬워진다...
		  
	3.10 반복하지 마라
		중복은 소프트웨어에서 악의 근원...
		
	3.12 함수를 어떻게 짜죠?
		처음부터 클린한 코드는 없다. 끊임없이 수정!
		
	3.13 결론
		